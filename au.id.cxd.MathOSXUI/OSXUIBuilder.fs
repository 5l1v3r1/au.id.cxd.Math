namespace au.id.cxd.MathOSXUI

open System
open System.Drawing
open MonoMac.Foundation
open MonoMac.AppKit

module OSXUIBuilder =

    let log s = Console.WriteLine("{0}", s)

    let logfmt (f:string) s = Console.WriteLine(f, s)

    /// the default wrapped ui
    let wrapUI ui = (fun () -> ui)

    /// <summary>
    /// A function used to help compose interfaces.
    /// Has no side effect on the parameters passed in.
    /// </summary>
    let nochange parent child = parent
    
    /// <summary>
    /// appendUI can be used to chain togethor series of append statements
    /// in order to use function composition
    /// (arrow operator in F#) to construct a nested user interface.
    /// The return value of an appendUI can be issued into a "childui" function.
    /// </summary>
    let appendUI (addFn, postFn, child) = 
                addFn postFn child |> ignore
                addFn
    
    /// <summary>
    /// an insert ui can be used with the uibuilder monad to extract 
    /// the UIElement out of a tuple generated by a childui function.
    /// This allows the UIElement to be used in mixed calls to the add function.
    /// </summary>                           
    let insertUI (addFn, postFn, child) =
        addFn postFn child

    /// <summary>
    /// Add a child view to the sub views of the parent
    /// </summary>
    let add (parent:NSView) postFn (child:NSView) =
        match parent with
            | :? NSScrollView -> (parent :?> NSScrollView).DocumentView <- child
            | _ -> parent.AddSubview(child)
        postFn parent child |> wrapUI 

    /// <summary>
    /// Add tab to ns tab view 
    /// </summary>
    let addTab (parent:NSTabView) postFn (child:NSTabViewItem) =
        parent.Add(child)

    /// <summary>
    /// add a child menuitem to the parent menu
    /// </summary>
    let addMenu (parent:NSMenu) postFn (child:NSMenuItem) =
        parent.AddItem(child)
        postFn parent child |> wrapUI

    /// <summary>
    /// add a child menu to the parent menu item
    /// </summary>
    let addSubmenu (parent:NSMenuItem) postFn (child:NSMenu) =
        parent.Submenu <- child
        postFn parent child |> wrapUI

    /// <summary>
    /// clear the application menu
    /// </summary>
    let clearApplicationMenu() =
        NSApplication.SharedApplication.Menu.RemoveAllItems()

    /// <summary>
    /// Clear the menu.
    /// </summary>
    let clearMenu name =
        let item = NSApplication.SharedApplication.Menu.ItemWithTitle(name)
        if item <> null then
            NSApplication.SharedApplication.Menu.RemoveItem(item)
        else ()
        
    /// <summary>
    /// add a menu item to the application menu
    /// </summary>
    let addApplicationMenu (menu:NSMenuItem) =
        NSApplication.SharedApplication.Menu.AddItem(menu)
        NSApplication.SharedApplication.Menu.Update()
    
    /// <summary>
    /// Cast component into an NSView
    /// </summary>
    let ui comp = (comp :> NSView)

    /// <summary>
    /// Cast component into an NSMenuItem
    /// </summary>
    let menuItem comp = (comp :> NSMenuItem)

     /// <summary>
    /// This childui allows a function that is compatible with "appendUI" composition or "insertUI" monad
    /// to be declared for a childui component that will be used at a later time.
    /// </summary>
    let childui elem changeFn = (fun addFn -> (addFn, changeFn, ui elem))


    /// <summary>
    /// Create a function to wrap menus
    /// </summary>
    let childmenu elem changeFn = (fun addFn -> (addFn, changeFn, menuItem elem)) 

    /// <summary>
    /// wrap child tab views
    /// </summary>
    let childtab elem changeFn = (fun addFn -> (addFn, changeFn, (elem :> NSTabViewItem)))

    /// <summary>
    /// Set the auto resize mask
    /// </summary>
    let resizeWidthHeight (view:NSView) =
        view.AutoresizingMask <-
                              NSViewResizingMask.HeightSizable |||
                              NSViewResizingMask.WidthSizable

    /// <summary>
    /// Calculate the inner bounds of the supplied rectangle with
    /// the given margin
    /// </summary>
    let innerbounds margin (rect:RectangleF) =
        new RectangleF(rect.X + margin,
                       rect.Y + margin,
                       rect.Width - margin,
                       rect.Height - margin)

   
    /// <summary>
    /// Set the vertical scrollbar enabled
    /// </summary>
    let allowVertical (view:NSScrollView) =
        view.HasVerticalScroller <- true
        view

    /// <summary>
    /// Set the horizontal scroll bar enabled
    /// </summary>
    let allowHorizontal (view:NSScrollView) =
        view.HasVerticalScroller <- true
        view

    /// <summary>
    /// Make an objective C selector.
    /// </summary>
    let makeSelector (name:string) =
        new MonoMac.ObjCRuntime.Selector (name);
